/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VoterTest, VoterTestInterface } from "../VoterTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "attachTokenToGauge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "detachTokenFromGauge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "emitDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "emitWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610125806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c8063411b1f7714604b578063698473e314604b578063a61c713a14605c578063ea94ee4414605c575b600080fd5b605a60563660046094565b5050565b005b605a606736600460bd565b505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114608f57600080fd5b919050565b6000806040838503121560a657600080fd5b8235915060b460208401606c565b90509250929050565b60008060006060848603121560d157600080fd5b8335925060df60208501606c565b915060408401359050925092509256fea26469706673582212203917b0ba3b943daf0b7400f8e46be96a6ab8d4ddfe92f810292c518caca8e99264736f6c634300080b0033";

type VoterTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VoterTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VoterTest__factory extends ContractFactory {
  constructor(...args: VoterTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VoterTest";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VoterTest> {
    return super.deploy(overrides || {}) as Promise<VoterTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VoterTest {
    return super.attach(address) as VoterTest;
  }
  connect(signer: Signer): VoterTest__factory {
    return super.connect(signer) as VoterTest__factory;
  }
  static readonly contractName: "VoterTest";
  public readonly contractName: "VoterTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VoterTestInterface {
    return new utils.Interface(_abi) as VoterTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VoterTest {
    return new Contract(address, _abi, signerOrProvider) as VoterTest;
  }
}
