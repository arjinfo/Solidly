/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../StakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardsToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeRewardApplicable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "notifyRewardAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "periodFinish",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526064600255600060055562093a8060065534801561002157600080fd5b50604051610b01380380610b018339810160408190526100409161008d565b600180546001600160a01b039384166001600160a01b031991821617909155600080549290931691161790556100c0565b80516001600160a01b038116811461008857600080fd5b919050565b600080604083850312156100a057600080fd5b6100a983610071565b91506100b760208401610071565b90509250929050565b610a32806100cf6000396000f3fe608060405234801561001057600080fd5b50600436106101355760003560e01c80637b0a47ee116100b2578063c8f33c9111610081578063d1af0c7d11610066578063d1af0c7d1461027b578063df136d651461029b578063ebe2b12b146102a457600080fd5b8063c8f33c911461026a578063cd3daf9d1461027357600080fd5b80637b0a47ee1461022657806380faa57d1461022f5780638b87634714610237578063a694fc3a1461025757600080fd5b8063386a9525116101095780633d18b912116100ee5780633d18b912146101b95780636ebcf607146101c157806372f702f3146101e157600080fd5b8063386a95251461019d5780633c6b16ab146101a657600080fd5b80628cc2621461013a5780630700037d1461016057806318160ddd146101805780632e1a7d4d14610188575b600080fd5b61014d6101483660046108ae565b6102ad565b6040519081526020015b60405180910390f35b61014d61016e3660046108ae565b60086020526000908152604090205481565b60095461014d565b61019b6101963660046108eb565b610344565b005b61014d60065481565b61019b6101b43660046108eb565b61049d565b61019b610636565b61014d6101cf3660046108ae565b600a6020526000908152604090205481565b6001546102019073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610157565b61014d60025481565b61014d610720565b61014d6102453660046108ae565b60076020526000908152604090205481565b61019b6102653660046108eb565b610739565b61014d60035481565b61014d61084c565b6000546102019073ffffffffffffffffffffffffffffffffffffffff1681565b61014d60045481565b61014d60055481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860209081526040808320546007909252822054670de0b6b3a7640000906102f061084c565b6102fa9190610933565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600a602052604090205461032a919061094a565b6103349190610987565b61033e91906109c2565b92915050565b3361034d61084c565b600455610358610720565b60035573ffffffffffffffffffffffffffffffffffffffff8116156103b957610380816102ad565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556004546007909152919020555b81600960008282546103cb9190610933565b9091555050336000908152600a6020526040812080548492906103ef908490610933565b90915550506001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044015b6020604051808303816000875af115801561046c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049091906109da565b61049957600080fd5b5050565b60006104a761084c565b6004556104b2610720565b60035573ffffffffffffffffffffffffffffffffffffffff811615610513576104da816102ad565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556004546007909152919020555b6000546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b491906109da565b6105bd57600080fd5b60055442106105db576006546105d39083610987565b60025561061d565b6000426005546105eb9190610933565b90506000600254826105fd919061094a565b60065490915061060d82866109c2565b6106179190610987565b60025550505b42600381905560065461062f916109c2565b6005555050565b3361063f61084c565b60045561064a610720565b60035573ffffffffffffffffffffffffffffffffffffffff8116156106ab57610672816102ad565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556004546007909152919020555b33600081815260086020526040808220805490839055915490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019390935260248301829052909173ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb9060440161044d565b60006005544210610732575060055490565b425b905090565b3361074261084c565b60045561074d610720565b60035573ffffffffffffffffffffffffffffffffffffffff8116156107ae57610775816102ad565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556004546007909152919020555b81600960008282546107c091906109c2565b9091555050336000908152600a6020526040812080548492906107e49084906109c2565b90915550506001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9060640161044d565b600060095460001415610860575060045490565b600954600254600354610871610720565b61087b9190610933565b610885919061094a565b61089790670de0b6b3a764000061094a565b6108a19190610987565b60045461073491906109c2565b6000602082840312156108c057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108e457600080fd5b9392505050565b6000602082840312156108fd57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561094557610945610904565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561098257610982610904565b500290565b6000826109bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156109d5576109d5610904565b500190565b6000602082840312156109ec57600080fd5b815180151581146108e457600080fdfea26469706673582212209a19abaaf88b11cd61f9fe06d88d3fb2805b2e24844d9b29c8ef39b7f3fdffce64736f6c634300080b0033";

type StakingRewardsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingRewardsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingRewards__factory extends ContractFactory {
  constructor(...args: StakingRewardsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StakingRewards";
  }

  deploy(
    _stakingToken: string,
    _rewardsToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingRewards> {
    return super.deploy(
      _stakingToken,
      _rewardsToken,
      overrides || {}
    ) as Promise<StakingRewards>;
  }
  getDeployTransaction(
    _stakingToken: string,
    _rewardsToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardsToken,
      overrides || {}
    );
  }
  attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }
  static readonly contractName: "StakingRewards";
  public readonly contractName: "StakingRewards";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
