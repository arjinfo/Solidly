/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VeDistTest, VeDistTestInterface } from "../VeDistTest";

const _abi = [
  {
    inputs: [],
    name: "checkpoint_token",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkpoint_total_supply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606f80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063811a40fe146037578063b21ed502146037575b600080fd5b00fea26469706673582212209e16ac352cd4c72f6935e7b3e3cbe6b0007288fc983d347848d004049875599864736f6c634300080b0033";

type VeDistTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VeDistTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VeDistTest__factory extends ContractFactory {
  constructor(...args: VeDistTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VeDistTest";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VeDistTest> {
    return super.deploy(overrides || {}) as Promise<VeDistTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VeDistTest {
    return super.attach(address) as VeDistTest;
  }
  connect(signer: Signer): VeDistTest__factory {
    return super.connect(signer) as VeDistTest__factory;
  }
  static readonly contractName: "VeDistTest";
  public readonly contractName: "VeDistTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VeDistTestInterface {
    return new utils.Interface(_abi) as VeDistTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VeDistTest {
    return new Contract(address, _abi, signerOrProvider) as VeDistTest;
  }
}
