/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Roots, RootsInterface } from "../Roots";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dec0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dec1",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_stable",
        type: "bool",
      },
      {
        internalType: "address",
        name: "_t0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_t1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_reserve0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserve1",
        type: "uint256",
      },
    ],
    name: "getAmountOutClosedForm",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_reserve0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserve1",
        type: "uint256",
      },
    ],
    name: "getAmountOutNewton",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61012060405234801561001157600080fd5b506040516111c73803806111c783398101604081905261003091610075565b60809490945260a092909252151560c0526001600160a01b0390811660e05216610100526100d3565b80516001600160a01b038116811461007057600080fd5b919050565b600080600080600060a0868803121561008d57600080fd5b8551945060208601519350604086015180151581146100ab57600080fd5b92506100b960608701610059565b91506100c760808701610059565b90509295509295909350565b60805160a05160c05160e0516101005161102961019e6000396000505060008181610144015281816101a5015281816102a401528181610361015281816104af0152818161051001526105fc015260008181608f0152818161040801526106b7015260008181610102015281816101f80152818161031d0152818161046d0152818161056301528181610675015261072001526000818160c30152818161023a015281816102f70152818161042e015281816105a50152818161064f01526106df01526110296000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632919ece81461003b578063c5a2b9d514610060575b600080fd5b61004e610049366004610e5f565b610073565b60405190815260200160405180910390f35b61004e61006e366004610e5f565b6103ec565b600061008161271086610f13565b61008b9086610f4e565b94507f00000000000000000000000000000000000000000000000000000000000000001561035c5760006100bf84846106b3565b90507f00000000000000000000000000000000000000000000000000000000000000006100f485670de0b6b3a7640000610f65565b6100fe9190610f13565b93507f000000000000000000000000000000000000000000000000000000000000000061013384670de0b6b3a7640000610f65565b61013d9190610f13565b92506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461019c57848661019f565b85855b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610238577f000000000000000000000000000000000000000000000000000000000000000061022989670de0b6b3a7640000610f65565b6102339190610f13565b610275565b7f000000000000000000000000000000000000000000000000000000000000000061026b89670de0b6b3a7640000610f65565b6102759190610f13565b9750600061028d610286848b610fa2565b8584610801565b6102979083610f4e565b9050670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461031b577f000000000000000000000000000000000000000000000000000000000000000061033d565b7f00000000000000000000000000000000000000000000000000000000000000005b6103479083610f65565b6103519190610f13565b9450505050506103e4565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146103b95783856103bc565b84845b90925090506103cb8783610fa2565b6103d58289610f65565b6103df9190610f13565b925050505b949350505050565b60006103fa61271086610f13565b6104049086610f4e565b94507f00000000000000000000000000000000000000000000000000000000000000001561035c577f000000000000000000000000000000000000000000000000000000000000000061045f84670de0b6b3a7640000610f65565b6104699190610f13565b92507f000000000000000000000000000000000000000000000000000000000000000061049e83670de0b6b3a7640000610f65565b6104a89190610f13565b91506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461050757838561050a565b84845b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146105a3577f000000000000000000000000000000000000000000000000000000000000000061059488670de0b6b3a7640000610f65565b61059e9190610f13565b6105e0565b7f00000000000000000000000000000000000000000000000000000000000000006105d688670de0b6b3a7640000610f65565b6105e09190610f13565b965060006105ef8884846108ae565b9050670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610673577f0000000000000000000000000000000000000000000000000000000000000000610695565b7f00000000000000000000000000000000000000000000000000000000000000005b61069f9083610f65565b6106a99190610f13565b93505050506103e4565b60007f0000000000000000000000000000000000000000000000000000000000000000156107ee5760007f000000000000000000000000000000000000000000000000000000000000000061071085670de0b6b3a7640000610f65565b61071a9190610f13565b905060007f000000000000000000000000000000000000000000000000000000000000000061075185670de0b6b3a7640000610f65565b61075b9190610f13565b90506000670de0b6b3a76400006107728385610f65565b61077c9190610f13565b90506000670de0b6b3a76400006107938480610f65565b61079d9190610f13565b670de0b6b3a76400006107b08680610f65565b6107ba9190610f13565b6107c49190610fa2565b9050670de0b6b3a76400006107d98284610f65565b6107e39190610f13565b9450505050506107fb565b6107f88284610f65565b90505b92915050565b6000805b60ff8110156108a2578261081986826109f8565b610824878787610a74565b61083690670de0b6b3a7640000610f65565b6108409190610f13565b61084a9085610f4e565b9350808411156108745760016108608286610f4e565b1161086f5783925050506108a7565b61088f565b60016108808583610f4e565b1161088f5783925050506108a7565b508061089a81610fba565b915050610805565b508190505b9392505050565b6000806108bb8486610fa2565b90506000806000806108ce888887610b1c565b90506108da8582610c3f565b93506108fd6108f8856ec097ce7bc90715b34b9f1000000000610f65565b610c87565b61090f90670de0b6b3a7640000610f65565b9350670de0b6b3a764000085670de0b6b3a76400006109447614e1878814c9cd8a33321216cbecfb2480000000000000610c87565b610956906729a2241af62c0000610f65565b6109609190610f13565b61096a9190610f65565b6109749190610f13565b925061097f85610cf5565b61099f7614e1878814c9cd8a33321216cbecfb2480000000000000610c87565b6109a99190610f65565b6109bb90670de0b6b3a7640000610f65565b9150600090506109cb8483610f13565b6109d58486610f13565b6109df9190610f4e565b90506109eb8188610f4e565b9998505050505050505050565b6000670de0b6b3a76400008381610a0f8280610f65565b610a199190610f13565b610a239190610f65565b610a2d9190610f13565b670de0b6b3a764000080610a418580610f65565b610a4b9190610f13565b610a56866003610f65565b610a609190610f65565b610a6a9190610f13565b6107f89190610fa2565b600082670de0b6b3a764000083818781610a8e8280610f65565b610a989190610f13565b610aa29190610f65565b610aac9190610f13565b610ab69190610f65565b610ac09190610f13565b670de0b6b3a7640000808581610ad68280610f65565b610ae09190610f13565b610aea9190610f65565b610af49190610f13565b610afe9088610f65565b610b089190610f13565b610b129190610fa2565b6103e49190610f4e565b600080670de0b6b3a76400008481610b348280610f65565b610b3e9190610f13565b610b489190610f65565b610b529190610f13565b90506000670de0b6b3a76400008681610b6b8280610f65565b610b759190610f13565b610b7f9190610f65565b610b899190610f13565b90506000670de0b6b3a7640000610ba08680610f65565b610baa9190610f13565b9050670de0b6b3a7640000818185610bc38b601b610f65565b610bcd9190610f65565b610bd79190610f13565b610be19190610f65565b610beb9190610f13565b670de0b6b3a7640000828189610c0287601b610f65565b610c0c9190610f65565b610c169190610f13565b610c209190610f65565b610c2a9190610f13565b610c349190610fa2565b979650505050505050565b600080610c4b84610d2a565b905082610c7d610c64836805dacd13ca9e300000610f65565b610c6e8680610f65565b610c789190610fa2565b610d71565b6103e49190610fa2565b6000807f80000000000000000000000000000000000000000000000000000000000000005b8015610cee57600191821b9182810183026003020180828681610cd157610cd1610eb5565b0410610ce557808202850394506001830192505b5060031c610cac565b5092915050565b6000670de0b6b3a76400008281610d0c8280610f65565b610d169190610f13565b610d209190610f65565b6107fb9190610f13565b6000670de0b6b3a764000082670de0b6b3a764000084670de0b6b3a764000086610d5388610de1565b610d5d9190610f65565b610d679190610f13565b610d0c9190610f65565b60006003821115610dd25750806000610d8b600283610f13565b610d96906001610fa2565b90505b81811015610dcc57905080600281610db18186610f13565b610dbb9190610fa2565b610dc59190610f13565b9050610d99565b50919050565b8115610ddc575060015b919050565b6000670de0b6b3a764000082670de0b6b3a764000084670de0b6b3a764000086670de0b6b3a764000088670de0b6b3a76400008a610e1e8c610e46565b610e289190610f65565b610e329190610f13565b610e3c9190610f65565b610d539190610f13565b6000670de0b6b3a764000082818181610d5d8280610f65565b60008060008060808587031215610e7557600080fd5b84359350602085013573ffffffffffffffffffffffffffffffffffffffff81168114610ea057600080fd5b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082610f49577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015610f6057610f60610ee4565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f9d57610f9d610ee4565b500290565b60008219821115610fb557610fb5610ee4565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fec57610fec610ee4565b506001019056fea26469706673582212208e503c1456672fd463991ce2a7fa1f7166770ea2818f131f7a6b07bb6f9b77f864736f6c634300080b0033";

type RootsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RootsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Roots__factory extends ContractFactory {
  constructor(...args: RootsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Roots";
  }

  deploy(
    _dec0: BigNumberish,
    _dec1: BigNumberish,
    _stable: boolean,
    _t0: string,
    _t1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Roots> {
    return super.deploy(
      _dec0,
      _dec1,
      _stable,
      _t0,
      _t1,
      overrides || {}
    ) as Promise<Roots>;
  }
  getDeployTransaction(
    _dec0: BigNumberish,
    _dec1: BigNumberish,
    _stable: boolean,
    _t0: string,
    _t1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _dec0,
      _dec1,
      _stable,
      _t0,
      _t1,
      overrides || {}
    );
  }
  attach(address: string): Roots {
    return super.attach(address) as Roots;
  }
  connect(signer: Signer): Roots__factory {
    return super.connect(signer) as Roots__factory;
  }
  static readonly contractName: "Roots";
  public readonly contractName: "Roots";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RootsInterface {
    return new utils.Interface(_abi) as RootsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Roots {
    return new Contract(address, _abi, signerOrProvider) as Roots;
  }
}
